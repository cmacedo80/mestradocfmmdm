
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

> #########################################################
> # script de treinamento dos modelos 
> # Autor: Cristiano Francis Matos de Macedo
> #########################################################
> 
> #install.packages('Rserve')
> #install.packages('tm')
> #install.packages('neuralnet')
> #install.packages('e1071')
> #install.packages('dplyr')
> #install.packages('party')
> #install.packages('caret')
> #install.packages('rpart')
> #install.packages('rpart.plot')
> #install.packages('e1071')
> #install.packages('nnet')
> #install.packages('wordcloud')
> #install.packages('randomForest')
> #install.packages('SnowballC')
> 
> library(neuralnet)
> library(e1071) 
> library(dplyr)

Attaching package: 'dplyr'

The following object is masked from 'package:neuralnet':

    compute

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(party)
Carregando pacotes exigidos: grid
Carregando pacotes exigidos: mvtnorm
Carregando pacotes exigidos: modeltools
Carregando pacotes exigidos: stats4
Carregando pacotes exigidos: strucchange
Carregando pacotes exigidos: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Carregando pacotes exigidos: sandwich
> library(tm)
Carregando pacotes exigidos: NLP
> library(caret)
Carregando pacotes exigidos: lattice
Carregando pacotes exigidos: ggplot2

Attaching package: 'ggplot2'

The following object is masked from 'package:NLP':

    annotate

> library(rpart)
> library(rpart.plot)
> library(e1071)
> library(nnet)
> library(wordcloud)
Carregando pacotes exigidos: RColorBrewer
> library(Rserve)
> library(randomForest)
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.

Attaching package: 'randomForest'

The following object is masked from 'package:ggplot2':

    margin

The following object is masked from 'package:dplyr':

    combine

> 
> #########################################################
> # Configura??o
> #########################################################
> #cores
> pal2 <- brewer.pal(8,"Dark2")
> 
> # comando para permitir a comunica????o com o aplicativo java
> # Rserve(args = '--no-save')
> 
> 
> #########################################################
> # Carga dos dados
> #########################################################
> 
> Sys.setlocale("LC_ALL", locale="pt_PT.UTF-8")
[1] ""
Warning message:
In Sys.setlocale("LC_ALL", locale = "pt_PT.UTF-8") :
  SO informa que a requisição para definir o locale como 'pt_PT.UTF-8' não pode ser honrada
> ag <- read.csv(file="ag.csv", header=TRUE, sep=";",encoding = 'UTF-8',stringsAsFactors = F,nrows = 100)
> pj <- read.csv(file="pj.csv", header=TRUE, sep=";",encoding = 'UTF-8',stringsAsFactors = F,nrows = 100)
> 
> 
> totalAmostras <- min(nrow(ag),nrow(pj))
> percent60 <- round(totalAmostras * 0.6);
> percent80 <- round(totalAmostras * 0.8);
> 
> set.seed(123)
> indices_ag <- sample( 1:totalAmostras, totalAmostras)
> set.seed(123)
> indices_pj <- sample( (totalAmostras+1):(totalAmostras*2), totalAmostras)
> 
> ag.tr <- indices_ag[1:percent60]     # %60
> ag.va <- indices_ag[(percent60+1):percent80]  # %20
> ag.te <- indices_ag[(percent80+1):totalAmostras]  # %20
> 
> pj.tr <- indices_pj[1:percent60]     # %60
> pj.va <- indices_pj[(percent60+1):percent80]  # %20
> pj.te <- indices_pj[(percent80+1):totalAmostras]  # %20
> 
> 
> #########################################################
> # Gera??o da WordCloud
> #########################################################
> 
> #  ag_corpus = Corpus(VectorSource(ag$titulo))
> #  ag_corpus = tm_map(ag_corpus, content_transformer(tolower))
> #  ag_corpus = tm_map(ag_corpus, removeNumbers)
> #  ag_corpus = tm_map(ag_corpus, removePunctuation)
> #  ag_corpus = tm_map(ag_corpus, removeWords, c(stopwords("portuguese")))
> #  ag_corpus =  tm_map(ag_corpus, stripWhitespace)
> #  ag_corpus =  tm_map(ag_corpus, PlainTextDocument)
> #  ag_corpus =  tm_map(ag_corpus, stemDocument)
> #  wordcloud(ag_corpus,max.words = 100, min.freq = 2,random.order = FALSE,colors=pal2)
> # 
> #  pj_corpus = Corpus(VectorSource(pj$titulo))
> #  pj_corpus = tm_map(pj_corpus, content_transformer(tolower))
> #  pj_corpus = tm_map(pj_corpus, removeNumbers)
> #  pj_corpus = tm_map(pj_corpus, removePunctuation)
> #  pj_corpus = tm_map(pj_corpus, removeWords, c(stopwords("portuguese")))
> #  pj_corpus =  tm_map(pj_corpus, stripWhitespace)
> #  pj_corpus =  tm_map(pj_corpus, PlainTextDocument)
> #  pj_corpus =  tm_map(pj_corpus, stemDocument)
> # wordcloud(pj_corpus,max.words = 100, min.freq = 2,random.order = FALSE,colors=pal2)
> 
> #########################################################
> # Prepara??o das bases de treinamento, validacao e teste
> #########################################################
> atividades  = rbind(ag,pj)
> 
> atividades_corpus = Corpus(VectorSource(atividades$titulo))
> atividades_corpus = tm_map(atividades_corpus, content_transformer(tolower))
> atividades_corpus = tm_map(atividades_corpus, removeNumbers)
> atividades_corpus = tm_map(atividades_corpus, removePunctuation)
> atividades_corpus = tm_map(atividades_corpus, removeWords, c(stopwords("portuguese")))
> atividades_corpus = tm_map(atividades_corpus, stripWhitespace)
> atividades_corpus = tm_map(atividades_corpus, stemDocument)
> atividades_corpus = tm_map(atividades_corpus, PlainTextDocument)
> #atividades_dtm <- DocumentTermMatrix(atividades_corpus)
> #atividades_dtm = removeSparseTerms(atividades_dtm, 0.99)
> #findFreqTerms(atividades_dtm, 2)
> 
> #atividades_dtm_tfidf <- DocumentTermMatrix(atividades_corpus, control = list(weighting = weightTfIdf))
> atividades_dtm_tfidf <- DocumentTermMatrix(atividades_corpus)
> atividades_dtm_tfidf
<<DocumentTermMatrix (documents: 200, terms: 726)>>
Non-/sparse entries: 1476/143724
Sparsity           : 99%
Maximal term length: 20
Weighting          : term frequency (tf)
> 
> atividades_dtm_tfidf = removeSparseTerms(atividades_dtm_tfidf, 0.99)
> #findFreqTerms(atividades_dtm_tfidf, 1)
> 
> atividades$titulo = NULL
> atividades = cbind(atividades, as.matrix(atividades_dtm_tfidf))
> atividades$descricao = as.factor(atividades$descricao)
> 
> #set.seed(1234)
> #indices = sample(3, nrow(atividades) , repl = TRUE,prob = c(0.6,0.2,0.2))
> 
> atividades.train<-rbind(atividades[ag.tr,],atividades[pj.tr,])
> atividades.validation<-rbind(atividades[ag.va,],atividades[pj.va,])
> atividades.test<-rbind(atividades[ag.te,],atividades[pj.te,])
> 
> #atividades.train      <- atividades[indices == 1,]
> #atividades.validation <- atividades[indices == 2,]
> #atividades.test       <- atividades[indices == 3,]
> 
> #ag_indices <- which(atividades$descricao =="acaogerencial")
> #pj_indices <- which(atividades$descricao =="projeto")
> 
> #atividades[ag_indices,]
> #
> # Treinamento e predi??o com a arvore de decisao
> atividades.tree = rpart(descricao~.,  method = "class", data = atividades.train);  
> pred.tree = predict(atividades.tree, atividades.validation,  type="class")
> # table(atividades.validation$descricao,pred.tree,dnn=c("Real","Previsto"))
> caret::confusionMatrix(table(atividades.validation$descricao,pred.tree,dnn=c("Real","Previsto")))
Confusion Matrix and Statistics

               Previsto
Real            acaogerencial projeto
  acaogerencial            19       1
  projeto                  10      10
                                         
               Accuracy : 0.725          
                 95% CI : (0.5611, 0.854)
    No Information Rate : 0.725          
    P-Value [Acc > NIR] : 0.58030        
                                         
                  Kappa : 0.45           
 Mcnemar's Test P-Value : 0.01586        
                                         
            Sensitivity : 0.6552         
            Specificity : 0.9091         
         Pos Pred Value : 0.9500         
         Neg Pred Value : 0.5000         
             Prevalence : 0.7250         
         Detection Rate : 0.4750         
   Detection Prevalence : 0.5000         
      Balanced Accuracy : 0.7821         
                                         
       'Positive' Class : acaogerencial  
                                         
> 
> # Treinamento e predi??o com naives bayes
> atividades.naiveBayes <- naiveBayes(descricao ~ ., data = atividades.train)
> pred.naiveBayes <- predict(atividades.naiveBayes,atividades.validation)
> #table(atividades.validation$descricao,pred=pred.naiveBayes,dnn=c("Real","Previsto"))
> caret::confusionMatrix(table(atividades.validation$descricao,pred=pred.naiveBayes,dnn=c("Real","Previsto")))
Confusion Matrix and Statistics

               Previsto
Real            acaogerencial projeto
  acaogerencial            20       0
  projeto                  20       0
                                        
               Accuracy : 0.5           
                 95% CI : (0.338, 0.662)
    No Information Rate : 1             
    P-Value [Acc > NIR] : 1             
                                        
                  Kappa : 0             
 Mcnemar's Test P-Value : 2.152e-05     
                                        
            Sensitivity : 0.5           
            Specificity :  NA           
         Pos Pred Value :  NA           
         Neg Pred Value :  NA           
             Prevalence : 1.0           
         Detection Rate : 0.5           
   Detection Prevalence : 0.5           
      Balanced Accuracy :  NA           
                                        
       'Positive' Class : acaogerencial 
                                        
> #table(atividades.validation$descricao,pred.naiveBayes,dnn=c("Obs","Pred"))
> 
> # Treinamento e predi??o com random folrest
> atividades.randomForest <- randomForest(descricao ~ .,  data=atividades.train, importance=TRUE,   ntree=2000)
> pred.randomForest <- predict(atividades.randomForest, atividades.validation)
> #table(atividades.validation$descricao,pred=pred.randomForest,dnn=c("Real","Previsto"))
> caret::confusionMatrix(table(atividades.validation$descricao,pred=pred.randomForest,dnn=c("Real","Previsto")))
Confusion Matrix and Statistics

               Previsto
Real            acaogerencial projeto
  acaogerencial            19       1
  projeto                   4      16
                                         
               Accuracy : 0.875          
                 95% CI : (0.732, 0.9581)
    No Information Rate : 0.575          
    P-Value [Acc > NIR] : 4.309e-05      
                                         
                  Kappa : 0.75           
 Mcnemar's Test P-Value : 0.3711         
                                         
            Sensitivity : 0.8261         
            Specificity : 0.9412         
         Pos Pred Value : 0.9500         
         Neg Pred Value : 0.8000         
             Prevalence : 0.5750         
         Detection Rate : 0.4750         
   Detection Prevalence : 0.5000         
      Balanced Accuracy : 0.8836         
                                         
       'Positive' Class : acaogerencial  
                                         
> 
> # Treinamento e predi??o com SVM
> atividades.svm = svm(descricao~., data = atividades.train);
Warning message:
In svm.default(x, y, scale = scale, ..., na.action = na.action) :
  Variable(s) 'financeira' constant. Cannot scale data.
> pred.svm = predict(atividades.svm, atividades.validation)
> #table(atividades.validation$descricao,pred.svm,dnn=c("Real","Previsto"))
> caret::confusionMatrix(table(atividades.validation$descricao,pred.svm,dnn=c("Real","Previsto")))
Confusion Matrix and Statistics

               Previsto
Real            acaogerencial projeto
  acaogerencial            20       0
  projeto                  13       7
                                          
               Accuracy : 0.675           
                 95% CI : (0.5087, 0.8143)
    No Information Rate : 0.825           
    P-Value [Acc > NIR] : 0.9939298       
                                          
                  Kappa : 0.35            
 Mcnemar's Test P-Value : 0.0008741       
                                          
            Sensitivity : 0.6061          
            Specificity : 1.0000          
         Pos Pred Value : 1.0000          
         Neg Pred Value : 0.3500          
             Prevalence : 0.8250          
         Detection Rate : 0.5000          
   Detection Prevalence : 0.5000          
      Balanced Accuracy : 0.8030          
                                          
       'Positive' Class : acaogerencial   
                                          
> 
> # Predi??o final com a base de teste com o random forest
> pred.randomForest <- predict(atividades.randomForest, atividades.test)
> caret::confusionMatrix(table(atividades.validation$descricao,pred=pred.randomForest,dnn=c("Real","Previsto")))
Confusion Matrix and Statistics

               Previsto
Real            acaogerencial projeto
  acaogerencial            17       3
  projeto                   3      17
                                          
               Accuracy : 0.85            
                 95% CI : (0.7016, 0.9429)
    No Information Rate : 0.5             
    P-Value [Acc > NIR] : 4.182e-06       
                                          
                  Kappa : 0.7             
 Mcnemar's Test P-Value : 1               
                                          
            Sensitivity : 0.850           
            Specificity : 0.850           
         Pos Pred Value : 0.850           
         Neg Pred Value : 0.850           
             Prevalence : 0.500           
         Detection Rate : 0.425           
   Detection Prevalence : 0.500           
      Balanced Accuracy : 0.850           
                                          
       'Positive' Class : acaogerencial   
                                          
> 
> #save(preditor,atividades_dtm_tfidf,file="modelo.RData")
> #save.image("modelo.RDAta")
> preditor <- atividades.randomForest;
> save(preditor, atividades_dtm_tfidf, file="var.RData", ascii = TRUE)
> #save.image(file="cfmm.RData")
> 
> 
> 
> proc.time()
  usuário   sistema decorrido 
     9.82      0.39     10.81 
